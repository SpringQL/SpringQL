/*
 * Whole syntax definition of SpringQL.
 *
 * This file is written in PEG (Parsing expression grammars) and
 * programmatically parsed by pest (https://github.com/pest-parser/pest).
 *
 * This file consists of sections (decorated with `===...`). and subsections (decoated with `---...`).
 *
 * The entry point of SpringQL's syntax is `command`.
 * See `Commands` section.
 */

/*
 * ================================================================================================
 * Keywords:
 * ================================================================================================
 */

// Beware of substrings.
//   NG) ^"A" | ^"ABSOLUTE"
// In this case, only "A" matches with query `ABSOLUTE` (eager matching).
keyword = { 
    ^"AS"
    | ^"ALTER"
    | ^"AND"
    | ^"AVG"
    | ^"BIGINT"
    | ^"BLOB"
    | ^"BOOLEAN"
    | ^"BY"
    | ^"CREATE"
    | ^"DURATION_MILLIS"
    | ^"DURATION_SECS"
    | ^"FALSE"
    | ^"FIXED"
    | ^"FLOAT"
    | ^"FLOOR_TIME"
    | ^"FLOOR"
    | ^"FOR"
    | ^"FROM"
    | ^"GROUP"
    | ^"INSERT"
    | ^"INTEGER"
    | ^"INTO"
    | ^"JOIN"
    | ^"LEFT"
    | ^"NOT"
    | ^"NULL"
    | ^"ON"
    | ^"OPTIONS"
    | ^"OUTER"
    | ^"PUMP"
    | ^"PTIME"
    | ^"READER"
    | ^"ROWTIME"
    | ^"SELECT"
    | ^"SERVER"
    | ^"SINK"
    | ^"SLIDING"
    | ^"SMALLINT"
    | ^"SOURCE"
    | ^"START"
    | ^"STREAM"
    | ^"TEXT"
    | ^"TIMESTAMP"
    | ^"TRUE"
    | ^"TYPE"
    | ^"UNSIGNED"
    | ^"WINDOW"
    | ^"WRITER"
}

/*
 * ================================================================================================
 * Lexical Structure:
 *
 * Defined almost independently from other SQL syntaxes.
 * This provides the ability to use UTF-8 characters for objects name like
 * table names and column names.
 * ================================================================================================
 */

WHITESPACE = _{ " " | "\t" | NEWLINE } // TODO: add `FORM FEED`

sql_language_character = _{
    rich_utf8_letter
    | DECIMAL_NUMBER
}

sql_special_character = _{
    "!"
    | "\""
    | "#"
    | "$"
    | "%"
    | "&"
    | "'"
    | "("
    | ")"
    | "*"
    | "+"
    | ","
    | "-"
    | "."
    | "/"
    | ":"
    | ";"
    | "<"
    | "="
    | ">"
    | "?"
    | "@"
    | "["
    | "\\"
    | "]"
    | "^"
    | "`"
    | "{"
    | "|"
    | "}"
    | "~"
}

// Enables intuitive table / column names even for non-native English speakers.
//
// See:
// pest's built-in character classes: https://pest.rs/book/grammars/built-ins.html#general-categories
// Unicode's General Category: http://www.unicode.org/reports/tr44/#General_Category_Values
rich_utf8_letter = _{
    !sql_special_character ~ (
        LETTER
        | MARK
        | PUNCTUATION
        | SYMBOL
        | LETTER_NUMBER
        | OTHER_NUMBER
    )
}

string_character = _{
    !"'"
    ~ ANY
}

/*
 * ----------------------------------------------------------------------------
 * Constants
 * ----------------------------------------------------------------------------
 */

constant = {
    null_constant
    | numeric_constant
    | boolean_constant
    | string_constant
    | duration_constant
}

null_constant = {
    ^"NULL"
}

numeric_constant = {
    float_constant
    | integer_constant
}

boolean_constant = {
    ^"TRUE"
    | ^"FALSE"
}

integer_constant = @{
    DECIMAL_NUMBER+
}

float_constant = @{
    DECIMAL_NUMBER+ ~ "." ~ DECIMAL_NUMBER+
    // TODO 1.5e12
}

string_constant = {
    "'" ~ string_content ~ "'"
}

string_content = @{
    string_character*
}

duration_constant = {
    duration_function ~ "(" ~ integer_constant ~ ")"
}

duration_function = {
    ^"DURATION_MILLIS"
    | ^"DURATION_SECS"
}

/*
 * ----------------------------------------------------------------------------
 * Operators
 * ----------------------------------------------------------------------------
 */

unary_operator = {
    "-"
}

binary_operator = {
    "="
    | "+"
    | "*"
    | "*"
    | ^"AND"
}

/*
 * ================================================================================================
 * Identifier:
 *
 * Defined independently from other SQL syntaxes.
 * ================================================================================================
 */

identifier = @{
    // does not start with a keyword.
    (
        !keyword ~ (
            identifier_start ~ identifier_part*
        )
    )
    // starts with a keyword but followed by other letters.
    | ( keyword ~ identifier_part+ )
}

identifier_start = _{
    rich_utf8_letter
}

identifier_part = _{
    identifier_start
    | DECIMAL_NUMBER
}

/*
 * ================================================================================================
 * Value Expressions:
 *
 * Extracted subset of terms and categories from PostgreSQL
 * (https://www.postgresql.org/docs/12/sql-expressions.html).
 * ================================================================================================
 */

condition = {
    value_expr
}

value_expr = {
    sub_value_expr ~ (binary_operator ~ value_expr)?
}
// To avoid left-recursion
sub_value_expr = {
    constant
    | column_reference
    | (unary_operator ~ value_expr)
    | function_call
}

column_reference = {
    correlation ~ "." ~ (
        ptime_column_name
        | column_name
    )
}

function_call = {
    function_name ~ "("
    ~ value_expr ~ ("," ~ value_expr)*
    ~ ")"
}
function_name = {
    ^"DURATION_MILLIS"
    | ^"DURATION_SECS"
    | ^"FLOOR_TIME"
    | ^"FLOOR"

}

aggr_expr = {
    aggregate_name ~ "("
    ~ value_expr
    ~ ")"
}
aggregate_name = {
    ^"AVG"
}

/*
 * ================================================================================================
 * Data Types:
 *
 * Extracted subset of terms and categories from PostgreSQL
 * (https://www.postgresql.org/docs/12/datatype.html).
 * ================================================================================================
 */

data_type = {
    integer_type
    | float_type
    | boolean_type
    | character_type
    | binary_type
    | timestamp_type
}

/*
 * ----------------------------------------------------------------------------
 * Integer Types
 * (https://www.postgresql.org/docs/12/datatype-numeric.html#DATATYPE-INT)
 * ----------------------------------------------------------------------------
 */

integer_type = {
    ^"UNSIGNED"? ~ (
        ^"SMALLINT"
        | ^"INTEGER"
        | ^"BIGINT"
    )
}

/*
 * ----------------------------------------------------------------------------
 * Float Types
 * ----------------------------------------------------------------------------
 */

float_type = {
    ^"FLOAT"
}

/*
 * ----------------------------------------------------------------------------
 * FBoolean Types
 * ----------------------------------------------------------------------------
 */

boolean_type = {
    ^"BOOLEAN"
}

/*
 * ----------------------------------------------------------------------------
 * Character Types
 * (https://www.postgresql.org/docs/12/datatype-character.html)
 * ----------------------------------------------------------------------------
 */

character_type = {
    ^"TEXT"
}

/*
 * ----------------------------------------------------------------------------
 * Byte types
 * (https://www.postgresql.org/docs/current/datatype-binary.html)
 * ----------------------------------------------------------------------------
 */

binary_type = {
    ^"BLOB"
}

/*
 * ----------------------------------------------------------------------------
 * Timestamp Types
 * ----------------------------------------------------------------------------
 */

timestamp_type = {
    ^"TIMESTAMP"
}

/*
 * ================================================================================================
 * Commands:
 *
 * Basically extracted subset of terms and categories from sqlstream
 * (https://docs.sqlstream.com/sql-reference-guide/).
 * ================================================================================================
 */

// The entry point of SpringQL.
command = {
    SOI ~ (
        create_source_stream_command
        | create_source_reader_command
        | create_stream_command
        | create_sink_stream_command
        | create_sink_writer_command
        | create_pump_command
    )
    ~ ";"?
    ~ EOI
}

/*
 * ----------------------------------------------------------------------------
 * CREATE SOURCE STREAM
 * ----------------------------------------------------------------------------
 */

create_source_stream_command = {
    ^"CREATE" ~ ^"SOURCE" ~ ^"STREAM"
    ~ stream_name
    ~ "("
    ~ column_definition ~ ("," ~ column_definition)*
    ~ ")"
}

/*
 * ----------------------------------------------------------------------------
 * CREATE STREAM
 * ----------------------------------------------------------------------------
 */

create_stream_command = {
    ^"CREATE" ~ ^"STREAM"
    ~ stream_name
    ~ "("
    ~ column_definition ~ ("," ~ column_definition)*
    ~ ")"
}

/*
 * ----------------------------------------------------------------------------
 * CREATE SINK STREAM
 * ----------------------------------------------------------------------------
 */

create_sink_stream_command = {
    ^"CREATE" ~ ^"SINK" ~ ^"STREAM"
    ~ stream_name
    ~ "("
    ~ column_definition ~ ("," ~ column_definition)*
    ~ ")"    
}

/*
 * ----------------------------------------------------------------------------
 * CREATE PUMP
 * ----------------------------------------------------------------------------
 */

create_pump_command = {
    ^"CREATE" ~ ^"PUMP"
    ~ pump_name
    ~ ^"AS"
    ~ ^"INSERT" ~ ^"INTO"
    ~ stream_name
    ~ "("
    ~ column_name ~ ("," ~ column_name)*
    ~ ")"
    ~ select_stream_command
}

/*
 * ----------------------------------------------------------------------------
 * CREATE SOURCE READER
 * ----------------------------------------------------------------------------
 */

create_source_reader_command = {
    ^"CREATE" ~ ^"SOURCE" ~ ^"READER" ~ source_reader_name 
    ~ ^"FOR" ~ stream_name
    ~ ^"TYPE" ~ source_reader_type
    ~ option_specifications?
}

/*
 * ----------------------------------------------------------------------------
 * CREATE SINK WRITER
 * ----------------------------------------------------------------------------
 */

create_sink_writer_command = {
    ^"CREATE" ~ ^"SINK" ~ ^"WRITER" ~ sink_writer_name 
    ~ ^"FOR" ~ stream_name
    ~ ^"TYPE" ~ sink_writer_type
    ~ option_specifications?
}

/*
 * ----------------------------------------------------------------------------
 * SELECT
 * ----------------------------------------------------------------------------
 */

select_stream_command = {
    ^"SELECT" ~ "STREAM"
    ~ select_field ~ ("," ~ select_field)*
    ~ (^"FROM" ~ from_item)
    ~ group_by_clause?
    ~ window_clause?
}

select_field = {
    value_expr ~ (^"AS"? ~ value_alias)?
    | aggr_expr ~ (^"AS"? ~ aggr_alias) // FIXME currently an expression is Tuple::eval_expression(tuple) (scalar expression) but aggr_expr should also be expression to realize `max(c1) + min(c2)`.
}

from_item = {
    sub_from_item ~ (join_type ~ from_item ~ ^"ON" ~ condition)?
}
// To avoid left-recursion
sub_from_item = {
    stream_name ~ (^"AS"? ~ correlation_alias)?
}

join_type = {
    ^"LEFT" ~ ^"OUTER" ~ ^"JOIN"
}

group_by_clause = {
    ^"GROUP" ~ "BY" ~ grouping_element ~ ("," ~ grouping_element)*
}

grouping_element = {
    value_expr
    | value_alias
}

window_clause = {
    fixed_window_clause
    | sliding_window_clause
}

fixed_window_clause = {
    ^"FIXED" ~ ^"WINDOW" ~ window_length ~ "," ~ allowed_delay
}

sliding_window_clause = {
    ^"SLIDING" ~ ^"WINDOW" ~ window_length ~ "," ~ window_period ~ "," ~ allowed_delay
}

window_length = {
    duration_constant
}

window_period = {
    duration_constant
}

allowed_delay = {
    duration_constant
}

/*
 * ----------------------------------------------------------------------------
 * Names
 * ----------------------------------------------------------------------------
 */

stream_name = {
    identifier
}

pump_name = {
    identifier
}

source_reader_name = {
    identifier
}
source_reader_type = {
    identifier
}

sink_writer_name = {
    identifier
}
sink_writer_type = {
    identifier
}

ptime_column_name = {
    ^"PTIME"
}
column_name = {
    identifier
}

option_name = {
    rich_utf8_letter ~ (
        rich_utf8_letter
        | DECIMAL_NUMBER
        | "-"  // e.g. HEADER_Content-Type
    )*
    
}

correlation = {
    identifier
}

correlation_alias = {
    identifier
}

value_alias = {
    identifier
}

aggr_alias = {
    identifier
}

/*
 * ----------------------------------------------------------------------------
 * Constraints
 * ----------------------------------------------------------------------------
 */

column_constraint = {
    ^"NOT NULL"
    | ^"ROWTIME"
}

/*
 * ----------------------------------------------------------------------------
 * Column Definitions
 * ----------------------------------------------------------------------------
 */

column_definition = {
    column_name
    ~ data_type
    ~ column_constraint*
}

/*
 * ----------------------------------------------------------------------------
 * Option Specifications
 * ----------------------------------------------------------------------------
 */

option_specifications = {
    ^"OPTIONS"
    ~ "("
    ~ option_specification ~ ("," ~ option_specification)*
    ~ ")"
}

option_specification = {
    option_name ~ option_value
}

option_value = {
    "'" ~ string_content ~ "'"
}
